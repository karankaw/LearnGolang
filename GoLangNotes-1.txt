https://thenewstack.io/understanding-golang-type-system/
User Defined Type in GoLang

===========================================================================

https://www.golang-book.com/


===========================================================================
https://www.geeksforgeeks.org/go-keywords/ - 25 Keywords
break
case
chan
const
continue
default
defer
else
fallthrough
for
func
go
goto
if
import
interface
map
package
range
return
select
struct
switch
type
var

===========================================================================

https://www.tutorialspoint.com/go/go_data_types.htm
The predefined architecture-independent integer types are −
Integer Types	
uint8
Unsigned 8-bit integers (0 to 255)

uint16
Unsigned 16-bit integers (0 to 65535)

uint32
Unsigned 32-bit integers (0 to 4294967295)

uint64
Unsigned 64-bit integers (0 to 18446744073709551615)

int8
Signed 8-bit integers (-128 to 127)

int16
Signed 16-bit integers (-32768 to 32767)

int32
Signed 32-bit integers (-2147483648 to 2147483647)
	
int64
Signed 64-bit integers (-9223372036854775808 to 9223372036854775807)

....................................................................

Floating Types
The predefined architecture-independent float types are − 
	
float32
IEEE-754 32-bit floating-point numbers


float64
IEEE-754 64-bit floating-point numbers
	
complex64
Complex numbers with float32 real and imaginary parts


complex128
Complex numbers with float64 real and imaginary parts


...................................................................
Other Numeric Types
There is also a set of numeric types with implementation-specific sizes −

Sr.No.	Types and Description

byte
same as uint8

rune
same as int32

uint
32 or 64 bits


int
same size as uint


uintptr
an unsigned integer to store the uninterpreted bits of a pointer value

===========================================================================
RUNE
https://www.geeksforgeeks.org/rune-in-golang/


To declare either a byte or a rune we use single quotes. 
While declaring byte we have to specify the type. If we don’t specify the type, then the default type is meant as a rune. 
A single quote will allow only one character.
===========================================================================
https://golangbyexample.com/double-single-back-quotes-go/

Double quotes
It is used to define a string. A string defined within double quotes will honor escaping characters. For, eg for when printing a string having \n there will be a new line printed. Similarly, \t will have tab printed.

Back Quotes
It is also used to define a string. A string encoded in back quotes is a raw literal string and doesn’t honor any kind of escaping.



===========================================================================
https://www.geeksforgeeks.org/different-ways-to-find-the-type-of-variable-in-golang/

Using reflect.TypeOf Function
Using reflect.ValueOf.Kind() Function
Using %T with Printf

%s
%U
%d
%f
%c

===========================================================================
unsafe package
unsafe.Sizeof(b)
